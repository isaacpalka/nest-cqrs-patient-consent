version: '3.4'

services:
  projections.db:
    container_name: patient-consent-projections
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=${PROJECTIONS_CREDENTIALS_USERNAME}
      - POSTGRES_PASSWORD=${PROJECTIONS_CREDENTIALS_PASSWORD}
      - POSTGRES_DB=${PROJECTIONS_DATABASE}
    networks:
      - backend
    ports:
      - '${PROJECTIONS_PORT}:5432'
    volumes:
      - type: volume
        source: projections-volume-data
        target: /var/lib/projections

  eventstore.db:
    container_name: patient-consent-eventstore
    image: eventstore/eventstore:20.6.1-buster-slim
    env_file:
      - ./.env
    ports:
      - '1113:1113'
      - '2113:2113'
    volumes:
      - type: volume
        source: eventstore-volume-data
        target: /var/lib/eventstore
      - type: volume
        source: eventstore-volume-logs
        target: /var/log/eventstore
    networks:
      - backend

  patient-consent:
    container_name: patient-consent
    build:
      context: '.'
    env_file:
      - ./.env
    command: ${CONTAINER_COMMAND}
    restart: always
    deploy:
      mode: replicated
      replicas: ${CONTAINER_SCALE}
      # above is ignored by dc up and dc run (only when deploy to swarm with docker stack deploy)
    depends_on:
      - projections.db
      - eventstore.db
      # service wont be started before this service is running
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:7070']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    ports:
      - '${APP_PORT}:${CONTAINER_PORT}'
    volumes:
      - './src:/app/src'
    links:
      - projections.db
      # by default, any service can reach any other service at that serviceâ€™s name.
    networks:
      - backend

volumes:
  projections-volume-data:
  eventstore-volume-data:
  eventstore-volume-logs:

networks:
  backend:
    driver: bridge
